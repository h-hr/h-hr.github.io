Teachers={}

for (let indexl = 0; indexl < Object.keys(all_id).length; indexl++) {
    
for (let indexm = 0; indexm < Object.keys(all_id[Object.keys(all_id)[indexl]]).length; indexm++) {
    
for (let indexc = 0; indexc < all_id[Object.keys(all_id)[indexl]][Object.keys(all_id[Object.keys(all_id)[indexl]])[indexm]].length; indexc++) {
    
 
 Teachers[all_id[Object.keys(all_id)[indexl]][Object.keys(all_id[Object.keys(all_id)[indexl]])[indexm]][indexc][0].filter(item => !item.includes('-') && isNaN(parseInt(item)))]=Teachers[all_id[Object.keys(all_id)[indexl]][Object.keys(all_id[Object.keys(all_id)[indexl]])[indexm]][indexc][0].filter(item => !item.includes('-') && isNaN(parseInt(item)))]||[];

Teachers[all_id[Object.keys(all_id)[indexl]][Object.keys(all_id[Object.keys(all_id)[indexl]])[indexm]][indexc][0].filter(item => !item.includes('-') && isNaN(parseInt(item)))].push(all_id[Object.keys(all_id)[indexl]][Object.keys(all_id[Object.keys(all_id)[indexl]])[indexm]][indexc]);

}


}


}

function combineArrays(jsonObject) {
  const combinedObject = {};

  for (const key of Object.keys(jsonObject)) {
    const prefix = key.replace(/,.*$/, ''); // Remove everything after the comma
    if (combinedObject[prefix]) {
      combinedObject[prefix] = combinedObject[prefix].concat(jsonObject[key]);
    } else {
      combinedObject[prefix] = jsonObject[key];
    }
  }

  return combinedObject;
}

combineArrays(Teachers)


