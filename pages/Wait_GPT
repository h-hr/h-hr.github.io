



function xhr(url, data) {
    const request = new XMLHttpRequest();
    request.open('POST', url, false);
    request.setRequestHeader('Content-Type', 'application/json');
    request.setRequestHeader('Authorization', `Bearer ${Key}`);
    request.send(data);

    if (request.status === 200) {
        return request.responseText;
    }
}

function chat_GPT(message) {
    Key = atob(atob('YzJzdGRVazNaa0pJV0c5ck1tMXZTVEZ2VkZsdWR6RlVNMEpzWW10R1NtZHRTWGQxU1hGaU1scE5kR1ZZYldFM1pGQnQ='));
    message = '' || message;
    const url = 'https://api.openai.com/v1/chat/completions';

    const data = JSON.stringify({
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "user", "content": message}],
        "temperature": 0.1
    });

    const responseText = xhr(url, data);

    return JSON.parse(responseText).choices[0].message.content;
}

function getSelectedParentElement() {
    var parentElement = null;
    var selection = window.getSelection();
    if (selection.rangeCount > 0) {
        var range = selection.getRangeAt(0);
        parentElement = range.commonAncestorContainer.parentElement;
    }
    return parentElement;
}

function getSelectedText() {
    var selectedText = '';
    if (window.getSelection) {
        selectedText = window.getSelection().toString();
    } else if (document.selection && document.selection.type != 'Control') {
        selectedText = document.selection.createRange().text;
    }
    return selectedText;
}

function selectText(element) {
    if (document.selection) { // For IE
        var range = document.body.createTextRange();
        range.moveToElementText(element);
        range.select();
    } else if (window.getSelection) { // For modern browsers
        var range = document.createRange();
        range.selectNodeContents(element);
        var selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
    }
}

// Example usage:
var myElement = document.getElementById("myElement");
selectText(myElement);
The selectText function accepts an HTML element as a parameter and selects its text content. It uses different methods for different browsers:

For Internet Explorer, it uses document.body.createTextRange() and moveToElementText to create a range and select the text within the element.

For modern browsers (non-IE), it uses document.createRange(), selectNodeContents, and window.getSelection() to create a range, select the element's text content, and add it to the user's selection.

This code will programmatically select the text within the specified HTML element as if a user had done it with a mouse or touch input.







//<textarea style="height: 132px; width: 196px;">${chat_GPT(prompt())}</textarea>


//document.body.innerHTML = escapeHTMLPolicy.createHTML("<h1>your_html</h1>");
//getSelectedParentElement().innerHTML=escapeHTMLPolicy.createHTML("your_html");

function get_select_menu(){

escapeHTMLPolicy = trustedTypes.createPolicy("forceInner",{createHTML: (to_escape) => to_escape});

const el= getSelectedParentElement().parentElement.parentElement.childNodes[1].querySelectorAll('span');

bound=el.length-1

result=[];

result.push('write just only the index of the answer \n'+getSelectedParentElement().innerText);
for (let index = 0; index < bound; index++) {

result.push(index+':'+el[index+1].innerText);


}
return result.join('\n')
}
//el[2].querySelector('span').innerText

//$0.innerText






//
function get_select(){

const el=getSelectedParentElement().parentElement.parentElement.querySelectorAll('[role="radio"]');

result=[];

result.push('write only the index of the answer \n'+getSelectedParentElement().querySelector('span').innerText);

bound=el.length;
  
for (let index = 0; index < bound; index++) {
result.push(index+':'+el[index].parentElement.parentElement.querySelector('span').innerText)
}

return result.join('\n')

}

function get_multi_select(){
const el=getSelectedParentElement().parentElement.parentElement.querySelectorAll('[role=checkbox]');

result=[];

result.push('it is multi select question write only the index of each right answer in array, write only valid javascript array , I want it text ready to eval  \n '+getSelectedParentElement().querySelector('span').innerText);

bound=el.length;

for (let index = 0; index < bound; index++) {
result.push(index+':'+el[index].nextSibling.querySelector('span').innerText)
}

return result.join('\n')
}
function simulateInput(inputElement, text) {

  if (inputElement) {
    // Set the value of the input field
    inputElement.value = text;

    // Trigger an input event to simulate user input
    const event = new Event('input', {
      bubbles: true,
      cancelable: true,
    });

    inputElement.dispatchEvent(event);
  } else {
    console.error(`Input element not found.`);
  }
}
function get_password(){simulateInput(getSelectedParentElement().parentElement.parentElement.parentElement.parentElement.querySelector('input'),JSON.parse(getSelectedParentElement().parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute('data-params').split(',')[10])[0]);}

function detect(type){
res=getSelectedParentElement().parentElement.parentElement.querySelectorAll(`[role="${type}"]`)[0]||false;
if(res!=false){res=true}
return res
}

function run_all(){

try {
get_password()
} catch (error) {


if(detect('radio')){


method=get_select();

cm=cm=chat_GPT(method);

console.log(cm);

getSelectedParentElement().parentElement.parentElement.querySelectorAll('[role="radio"]')[parseInt(cm)].parentElement.parentElement.querySelector('span').click();


}
else if(detect('checkbox')){


method=get_multi_select()

cm=chat_GPT(method);

console.log(cm);

answers=JSON.parse(cm);

for (let index = 0; index < answers.length; index++) {
    getSelectedParentElement().parentElement.parentElement.querySelectorAll('[role=checkbox]')[answers[index]].click()

}


}
else if(detect('option')){


method=get_select_menu();

cm=chat_GPT(method);

console.log(cm);

//getSelectedParentElement().parentElement.parentElement.childNodes[1].querySelector('div').querySelector('div').click();

getSelectedParentElement().parentElement.parentElement.querySelector('[tabindex="0"]').querySelector('span').innerText='choose '+cm

//function tcode(){

//getSelectedParentElement().parentElement.parentElement.childNodes[1].querySelector('div').childNodes[1].querySelectorAll('span')[parseInt(cm)+1].parentElement.click()


//getSelectedParentElement().parentElement.parentElement.querySelectorAll('[role="option"]')[parseInt(cm)+1].click()



//}

//setTimeout(tcode, 10000);


}
}

}
