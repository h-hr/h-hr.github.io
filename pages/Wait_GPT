



function xhr(url, data) {
    const request = new XMLHttpRequest();
    request.open('POST', url, false);
    request.setRequestHeader('Content-Type', 'application/json');
    request.setRequestHeader('Authorization', `Bearer ${Key}`);
    request.send(data);

    if (request.status === 200) {
        return request.responseText;
    }
}

function chat_GPT(message) {
    Key = atob(atob('YzJzdGRVazNaa0pJV0c5ck1tMXZTVEZ2VkZsdWR6RlVNMEpzWW10R1NtZHRTWGQxU1hGaU1scE5kR1ZZYldFM1pGQnQ='));
    message = '' || message;
    const url = 'https://api.openai.com/v1/chat/completions';

    const data = JSON.stringify({
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "user", "content": message}],
        "temperature": 0.7
    });

    const responseText = xhr(url, data);

    return JSON.parse(responseText).choices[0].message.content;
}

function getSelectedParentElement() {
    var parentElement = null;
    var selection = window.getSelection();
    if (selection.rangeCount > 0) {
        var range = selection.getRangeAt(0);
        parentElement = range.commonAncestorContainer.parentElement;
    }
    return parentElement;
}

//<textarea style="height: 132px; width: 196px;">${chat_GPT(prompt())}</textarea>


//document.body.innerHTML = escapeHTMLPolicy.createHTML("<h1>your_html</h1>");
//getSelectedParentElement().innerHTML=escapeHTMLPolicy.createHTML("your_html");

function get_select_menu(){

escapeHTMLPolicy = trustedTypes.createPolicy("forceInner",{createHTML: (to_escape) => to_escape});

const el= getSelectedParentElement().parentElement.parentElement.childNodes[1].querySelectorAll('span');

bound=el.length-1

result=[];

result.push('write just only the index of the answer \n'+getSelectedParentElement().innerText);
for (let index = 0; index < bound; index++) {

result.push(index+':'+el[index+1].innerText);


}
return result.join('\n')
}
//el[2].querySelector('span').innerText

//$0.innerText






//
function get_select(){

const el=getSelectedParentElement().parentElement.parentElement.parentElement.childNodes[1].querySelector('div').querySelectorAll('span');

result=[];

result.push('write only the index of the answer \n'+getSelectedParentElement().querySelector('div').querySelector('div').innerText);

bound=el.length-1;
  
for (let index = 0; index < bound; index++) {
result.push(index+':'+el[index+1].innerText)
}

return result.join('\n')

}

function get_select_one(){


const bel=getSelectedParentElement().parentElement.parentElement.parentElement.childNodes[1];

const belo=getSelectedParentElement().parentElement.parentElement.parentElement

const bela = typeof bel === 'undefined' ? belo : bel;



const el=bela.querySelector('div').querySelectorAll('span');

result=[];

result.push('write only the index of the answer \n'+getSelectedParentElement().querySelector('div').querySelector('div').innerText);

bound=el.length-3;
  
for (let index = 0; index < bound; index++) {
result.push(index+':'+el[index+3].innerText)
}

return result.join('\n')

}


function get_multi_select(){
const el=getSelectedParentElement().parentElement.parentElement.parentElement.parentElement.childNodes[1].querySelector('div').querySelectorAll('span');

result=[];

result.push(getSelectedParentElement().innerText);

bound=el.length;
   
for (let index = 0; index < bound; index++) {
result.push(el[index].innerText)
}

return result.join('\n')
}
function simulateInput(inputElement, text) {

  if (inputElement) {
    // Set the value of the input field
    inputElement.value = text;

    // Trigger an input event to simulate user input
    const event = new Event('input', {
      bubbles: true,
      cancelable: true,
    });

    inputElement.dispatchEvent(event);
  } else {
    console.error(`Input element not found.`);
  }
}
function get_password(){simulateInput(getSelectedParentElement().parentElement.parentElement.parentElement.parentElement.querySelector('input'),JSON.parse(getSelectedParentElement().parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute('data-params').split(',')[10])[0]);}

function detect(type){
res=getSelectedParentElement().parentElement.parentElement.querySelectorAll(`[role="${type}"]`)[0]||false;
if(res!=false){res=true}
return res
}

function run_all(){

try {
get_password()
} catch (error) {


if(detect('radio')){


try {
    method=get_select();

cm=chat_GPT(method);

console.log(cm);

getSelectedParentElement().parentElement.parentElement.parentElement.childNodes[1].querySelector('div').querySelectorAll('span')[parseInt(cm)+1].click();

} catch (error) {

    method=get_select_one();

cm=chat_GPT(method);

console.log(cm);

getSelectedParentElement().parentElement.parentElement.parentElement.querySelector('div').querySelectorAll('span')[parseInt(cm)+3].click();

}


}
else if(detect('checkbox')){


method=get_multi_select()


}
else if(detect('option')){


method=get_select_menu();

cm=chat_GPT(method);

console.log(cm);

getSelectedParentElement().parentElement.parentElement.childNodes[1].querySelector('div').querySelector('div').click();

function tcode(){

//getSelectedParentElement().parentElement.parentElement.childNodes[1].querySelector('div').childNodes[1].querySelectorAll('span')[parseInt(cm)+1].parentElement.click()


getSelectedParentElement().parentElement.parentElement.querySelectorAll('[role="option"]')[parseInt(cm)+1].click()



}

setTimeout(tcode, 10000);


}
}

}








