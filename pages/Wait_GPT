temp='';
tokens=256;

E_E='';

function p(e,n){for(let t=0;t<n;t++)e=e.parentElement;return e}
function it(e){return e.innerText}
function a(e,s){return e.querySelectorAll(s)}
function s(e,s){try { return e.querySelector(s) } catch (error) { return null }}
function xhr(url, data) {
    const request = new XMLHttpRequest();
    request.open('POST', url, false);
    request.setRequestHeader('Content-Type', 'application/json');
    request.setRequestHeader('Authorization', `Bearer ${Key}`);
    request.send(data);

    if (request.status === 200) {
        return request.responseText;
    }
}
function chat_GPT(instr,exq,exa,message) {
    Key = atob(atob('YzJzdGRVazNaa0pJV0c5ck1tMXZTVEZ2VkZsdWR6RlVNMEpzWW10R1NtZHRTWGQxU1hGaU1scE5kR1ZZYldFM1pGQnQ='));
    message = '' || message;
    const url = 'https://api.openai.com/v1/chat/completions';

    const data = JSON.stringify([{'model': 'gpt-3.5-turbo',
  'messages': [
    {
      'role': 'system',
      'content': instr
    },
    {
      'role': 'user',
      'content': exq
    },
    {
      'role': 'assistant',
      'content': exa
    },
    {
      'role': 'user',
      'content': message
    }
  ],
  'temperature': 1,
  'max_tokens': tokens,
  'top_p': 1,
  'frequency_penalty': 0,
  'presence_penalty': 0
}][0]);

    const responseText = xhr(url, data);

    return JSON.parse(responseText).choices[0].message.content;
}
function get_select(){

const el=a(p(E_E,6),'[role=radio]');

result=[];

result.push(it(s(p(E_E,2),'span')));

bound=el.length;

for (let index = 0; index < bound; index++) {
result.push(index+':'+it(s(p(el[index],2),'span')))
}

result=result.join('\n').split();

result.unshift('0');

result.unshift('the game that made by notch\n 0:minecraft\n 1:zinecraft\n 2:winecraft');

result.unshift('always write only the index of the answer');

return result

}

function get_multi_select(){
const el=a(p(E_E,5),'[role=checkbox]');

result=[];

result.push('it is multi select question write only the index of each right answer in array, write only valid javascript array , I want it text ready to eval  \n '+it(E_E));

bound=el.length;

for (let index = 0; index < bound; index++) {
result.push(index+':'+it(s(el[index].nextSibling,'span')))
}

return result.join('\n')
}

function get_select_menu(){

escapeHTMLPolicy = trustedTypes.createPolicy("forceInner",{createHTML: (to_escape) => to_escape});

const el=a(p(E_E,2).childNodes[1],'span');

bound=el.length-1;

result=[];

result.push('write just only the index of the answer \n '+it(p(E_E,2)));
for (let index = 0; index < bound; index++) {

result.push(index+':'+it(el[index+1]));

}
return result.join('\n')
}

function get_type_answer(){

const el=a(p(E_E,6),'[role]');

result=[];

result.push('Answer the question make the answer as less as possible\n ');
result.push('What is the sky?');
result.push('Atmospheric space above the Earth.');
result.push(it(el[0].childNodes[0]));

return result;

}

function get_top_row(){

result=[];

if(detect('radiogroup')){dr='radiogroup'}else if(detect('group')){dr='group'}

const el=a(p(E_E,4),`[role=${dr}]`)[0].previousElementSibling.childNodes;

for (let index = 0; index < el.length-1; index++) {
   result.push(index+':'+it(el[index+1]))
}

return result.join('\n')
}

function get_right_column(){

result=[];

if(detect('group')){dr='group'}else if(detect('radiogroup')){dr='radiogroup'}

const el=a(p(E_E,6),`[role=${dr}]`);

for (let index = 0; index < el.length; index++) {
   result.push(index+':'+it(s(el[index],'div')))
}

return result.join('\n')
}

function row_start(n){n=n||0;
return ['write only the index of the answer \n ','it is multi select question write only the index of each right answer in array, write only valid javascript array , I want it text ready to eval  \n '][n]+it(E_E)+'\n'+get_right_column()
}
function column_start(n){
return ['write only the index of the answer \n ','it is multi select question write only the index of each right answer in array, write only valid javascript array , I want it text ready to eval  \n '][n]+it(E_E)+'\n'+get_top_row()
}

function simulateInput(inputElement, text) {

  if (inputElement) {

    inputElement.value = text;

    const event = new Event('input', {
      bubbles: true,
      cancelable: true,
    });

    inputElement.dispatchEvent(event);
  } else {
    console.error(`Input element not found.`);
  }
}
function get_password(){simulateInput(s(p(E_E,6),'input'),JSON.parse(p(E_E,5).getAttribute('data-params').split(',')[10])[0]);}
function detect(type){
res=a(p(E_E,6),`[role="${type}"]`)[0]||false;
if(res!=false){res=true}
return res
}

function run_all(){
try {role=(a(p(E_E,6),'[role]').length==2)} catch (error) {role=false}

try {
get_password();
} catch (error) {

if(detect('radio')&&!(a(p(E_E,4),'[role=radiogroup]').length>1)){

temp=0.7;

tokens=1;

method=get_select();

cm=chat_GPT(...method);

console.log(cm);

s(p(a(p(E_E,6),'[role=radio]')[parseInt(cm)],2),'span').click();

}else if(detect('checkbox')&&!(detect('group'))){

temp=0.1;

method=get_multi_select();

cm=chat_GPT(method);

console.log(cm);

answers=JSON.parse(cm);

for (let index = 0; index < answers.length; index++) {
    a(p(E_E,6),'[role=checkbox]')[answers[index]].click()

}

}else if(detect('option')){

temp=0.7;

method=get_select_menu();

cm=chat_GPT(method);

console.log(cm);

const eit=s(s(p(E_E,6),'[tabindex="0"]'),'span');

old_eit=it(eit);

eit.innerText='choose '+cm;

}else if(role){

temp=0.7;

method=get_type_answer();

cm=chat_GPT(...method);

console.log(cm);

simulateInput(s(p(E_E,6),'input'),cm);

}else if(detect('radiogroup')){

temp=0.1;

ce=E_E.parentElement.querySelector('div').innerHTML=='';

if(ce!=true){
method=column_start();

cm=chat_GPT(method);
console.log(cm);

a(p(E_E,2),'[role=radio]')[parseInt(cm)].click();

}else if(ce==true){
method=row_start();

cm=chat_GPT(method);
console.log(cm);

s(s(s(a(p(E_E,3),'[role=radiogroup]')[parseInt(cm)],'span').childNodes[Array.from(p(E_E,1).children).indexOf(E_E)],'div'),'div').click();

};

}else if(detect('group')){

temp=0.1;

ce=E_E.parentElement.querySelector('div').innerHTML=='';

if(ce!=true){
method=column_start(1);

cm=chat_GPT(method);
console.log(cm);

//a(p(E_E,2),'[role=radio]')[parseInt(cm)].click();

}else if(ce==true){
method=row_start(1);

cm=chat_GPT(method);
console.log(cm);

//s(s(s(a(p(E_E,3),'[role=radiogroup]')[parseInt(cm)],'span').childNodes[Array.from(p(E_E,1).children).indexOf(E_E)],'div'),'div').click();

};

}

}

}




function get_elements(){

elem=get_elements_old();

for (let index = 0; index < elem.length; index++) {

const el=a(p(s(elem[index],'span'),4),'[role=radiogroup],[role=group]');
if(el[0]!=undefined&&el.length>1){
	

if(el[0].getAttribute('role')=='radiogroup'&&(a(p(el[0],4),'[role=radiogroup]').length>1)){
	
el2=el[0].previousElementSibling.childNodes;
for (let inde = 0; inde < el2.length-1; inde++) {
    el2[inde+1].setAttribute('id','runall')
}
for (let ind = 0; ind < el.length; ind++) {
s(s(el[ind],'span'),'div').setAttribute('id','runall')
}

}else if(el[0].getAttribute('role')=='group'){

el2=el[0].previousElementSibling.childNodes;

for (let inde = 0; inde < el2.length-1; inde++) {
    el2[inde+1].setAttribute('id','runall')
}
for (let ind = 0; ind < el.length; ind++) {
s(el[ind],'div').setAttribute('id','runall')
}

}

}
else{
s(elem[index],'span').setAttribute('id','runall')

}
}

a(document,'#runall').forEach(function(element) {
  element.addEventListener('click', function() {
    E_E=this;
    run_all();
  });
});

}

function get_elements_old(){

bound=a(document,'span').length-1;

resul=[];

for (let index = 0; index < bound; index++) {

const cel=p(a(document.body,'span')[index],4);

if(cel.getAttribute('role')!='listbox'&&cel.nodeName!='LABEL'&&cel.nodeName!='BODY'&&(s(cel,'[role=radio]')==null||s(cel,'[role=checkbox]')==null||s(cel,'[role=option]')==null)){

resul.push(cel)

}

}

resul=[...new Set(resul)];

return resul
}


get_elements();

function tempAlert(msg,duration){
escapeHTMLPolicy = trustedTypes.createPolicy("forceInner",{createHTML: (to_escape) => to_escape});
 var el = document.createElement("div");
el.onclick=function remsel(){this.style.display='none'};
 el.setAttribute("style","position:fixed;top:40%;left:20%;background-color:white;");
 el.innerHTML = escapeHTMLPolicy.createHTML(msg);
 setTimeout(function(){
  el.parentNode.removeChild(el);
 },duration);
 document.body.appendChild(el);
}
